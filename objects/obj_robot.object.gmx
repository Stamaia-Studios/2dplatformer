<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_robot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Generate variabes

event_inherited();//use parent's variables and setup code

max_speed = .05;//speed this moves
view_distance = 90;//how far this will track the player


dir_offset[0] = 0;//need to create this array 
dir_offset[1] = 0;//to address viewing of player
dir_offset[2] = abs(bbox_left-bbox_right);//when facing opposite direction


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and collsion stufffs

hsp=0;//default not to move

//check if player is in horizontally
dist=abs(obj_player.x-(x+dir_offset[1+dir]));
if(dist&lt;view_distance&amp;&amp;sign(obj_player.x-x)==dir){
//if(obj_player.x&gt;x+view_distance*dir+dir_offset[1+dir]&amp;&amp;obj_player.x&lt;x+dir_offset[1+dir]){
if(obj_player.bbox_top+abs(obj_player.bbox_top-obj_player.bbox_bottom)&gt;=
y&amp;&amp;obj_player.bbox_top&lt;=bbox_bottom)//check if player is in vertically
hsp=max_speed*dir;
}



event_inherited();//check for falling and moving

if(place_meeting(x,y,obj_player)){
if(obj_player.inv&lt;1)//allow player to walk through
obj_player.hp--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphics Neededing

//make sure to actually draw the sprite :'V
draw_sprite(spr_robot,0,x,y);

if(debug_graphics){

draw_set_color(c_red);

//draw the viewing rectangle
draw_rectangle(x+dir_offset[1+dir],y,x+dir_offset[1+dir]+view_distance*dir,
y+abs(bbox_top-bbox_bottom),1);

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
