<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

key_right = vk_right;
key_left = vk_left;
key_jump = ord('Z');
key_attack = ord('X');
key_down = vk_down;
key_run = vk_shift;
taptorun = false;
key_action = ord('C'); // pick_up and throw
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Variables

facing = 1; //last direction the player moved in
grav = 0.2; // Gravity
maxfallspeed = 8; // Max speed at which you can fall
hsp = 0; // Horizontal Speed
vsp = 0; // Vertical Speed
jumpspeed = 6; // Jump Speed Constant
basemovespeed = 2; // Movement Speed Constant
hsp_carry = 0;
vsp_carry = 0;
crouchmult = 0.5; // Crouch movement multiplier
runmult = 1.5 // Run movement multiplier
movestatusmult = 1; // For buffs/debuffs
glidemult = 0.25; // Glide speed mutlplier
jumpboost = 0.5; // Horizontal boost on jump
runjumpboost = 1; // Horizontal boost on runjump
running = false;
dash_left_timer = 0;
dash_right_timer = 0;
dash_timeout = 15;
dashtrigger = false;
attackState = 0; //0-none, 1-dash, 2-crouch
dashAttackSpeed = 6; //speed of the dash attack
dashAttackCool = 25; //deceleration time
dashAttackTimer = dashAttackCool;
down_pressed = 0; 
jump_pressed = 0;
run_jump = false;
fallthrough = false;
attackTrigger = false;
facingDir = 1;
apexFallTrigger = -4; // fall speed reqiured to recieve additional gravity
maxFallTimer = 10; // Amount of steps before player can no longer jump while falling
fallTimer = maxFallTimer; // Current steps before player can no longer jump while falling
canJump = true; // Decides if the player can jump - Used to prevent double jumping

chrH = 16; // half height of player in pixels
chrW = 16; // half width of player in pixels
has_gloves = false; // pick up flags - boxing gloves
glovesmult = 1.5; // damage multiplier
has_shorts = false; // boxing shorts
shortsmult = 1; // used for running and jumping
has_boomerang = false; // boomerang
has_throwable = false; // throwable item
throwable_id = 0; // place holder item id for pots/et;al


inv = 0;//invincibility 'steps' where the character cannot be damaged
inv_frames = 60;//frame native limit, potential 'Mario Star' effect -- 1 second at 60FPS
spawn[0] = x;spawn[1] = y;//default spawn information
max_hp=10;//max allottment of health, e.g level up health
hp = 10;// character health
last_hp=hp;//health to determine damage
last_dir=1;//last direction facing -- default is right
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision
// Get Inputs
right_pressed = keyboard_check(key_right);
left_pressed = keyboard_check(key_left);
jump_pressed = keyboard_check_pressed(key_jump);
attack_pressed = keyboard_check_pressed(key_attack);
down_pressed = keyboard_check(key_down);
run_pressed = keyboard_check(key_run);
action_pressed = keyboard_check_pressed(key_action); // pickup or throw

onground = place_meeting(x, y+1, obj_wall); // True if player is on the ground

if !onground // If the player is not on the ground
{
    fallTimer -= 1; // Reduce fall timer
}else{ // Otherwise
    canJump = true // The player is allowed to jump again 
    fallTimer = maxFallTimer; // Fall timer is reset
}

if fallTimer &lt;= 0 // If the fall timer has been reached
{
    canJump = false // Remove players ability to jump
}

// Calculate movement
move = -left_pressed + right_pressed; // Will be -1 for left and +1 for right
if(move != 0){
    facing = move;
}
crouchspeed = (basemovespeed * crouchmult) * movestatusmult; // Get current crouch speed
runspeed = (basemovespeed * runmult) * movestatusmult; // Get current run speed
movespeed = basemovespeed * movestatusmult; // Get current walk speed

// lock in facing direction of player
if(move &gt; 0)
    facingDir = 1;
else if (move &lt; 0)
    facingDir = -1;

gliding = !onground &amp;&amp; sign(vsp) &amp;&amp; keyboard_check(key_jump); // Check if can glide

if ((keyboard_check_released(key_down) || onground) &amp;&amp; fallthrough) // If in fallthrough and down key has been released or have touched ground, exit fallthrough
    fallthrough = false;

// throw condition - set flag high if conditions are met (idle, moving, running, jumping only)
throw_ok = (has_throwable || has_boomerang) &amp;&amp; (!onground || running || move || move == 0) &amp;&amp; !down_pressed &amp;&amp; !gliding &amp;&amp; !dashtrigger &amp;&amp; !attackTrigger;

// pick up condition - set flag high if conditions met (idle, moving, running only)
pick_up_ok = onground &amp;&amp; (running || move || move == 0) &amp;&amp; !down_pressed &amp;&amp; !gliding &amp;&amp; !dashtrigger &amp;&amp; !attackTrigger;
pWall_pickup_chk = place_meeting(x, y+1, obj_pWall) | place_meeting(x, y-1, obj_pWall) | place_meeting(x+1, y, obj_pWall) | place_meeting(x-1, y, obj_pWall);
// Decrement timers
if(dash_left_timer &gt; 0) dash_left_timer--;
if(dash_right_timer &gt; 0) dash_right_timer--;

// Check if dashing has stopped and if so, set dashtrigger to false
if (move == 0 &amp;&amp; dashtrigger)
    dashtrigger = false;

// Check for dash triggers (double press right or left)
if (keyboard_check_pressed(vk_right))
{
    if(dash_right_timer &gt; 0) 
    {
        dashtrigger = true;
        dash_right_timer = 0;
    }
    else
        dash_right_timer = dash_timeout;
    if(dash_left_timer &gt; 0)
        dash_left_timer = 0;
}
else if (keyboard_check_pressed(vk_left))
{
    if(dash_left_timer &gt; 0) 
    {
        dashtrigger = true;
        dash_left_timer = 0;
    }
    else
        dash_left_timer = dash_timeout;
    if(dash_right_timer &gt; 0)
        dash_right_timer = 0;
}

// Set running to false, and only set it to true if dashing has happened with tap-to-run or the run key is held without tap-to-run
running = false;
if (dashtrigger &amp;&amp; taptorun &amp;&amp; onground)
    running = true;
else if (run_pressed &amp;&amp; !taptorun &amp;&amp; onground)
    running = true;

if((down_pressed &amp;&amp; onground &amp;&amp; dashAttackTimer == dashAttackCool) || (sprite_index == spr_player_crouching &amp;&amp; place_meeting(x, y-(sprite_height+1), obj_wall))) // Slide/crouch if touching ground and holding down or under an object that is short than the player and already crouhing/sliding
{
    sprite_index = spr_player_crouching; // Set to crouching/sliding sprite
    if(attack_pressed &amp;&amp; attackState == 0){//if pressing attack and not already attacking
        hsp = 0; //stop player, set attack state, change to crouch attack sprite, and create hitbox
        attackState = 2;
        sprite_index = spr_player_crouch_attack;
        instance_create(x+((sprite_width)*facing), y+(sprite_height)/2, obj_hb_crouch);//create the crouch attack hitbox object
    }else if (abs(hsp) &gt; movespeed) // Slide if moving faster than base movement speed
    {
        hsp *= 0.99 // Exponentially decrease speed
        if (abs(hsp) &lt; crouchspeed) hsp = sign(hsp) * crouchspeed; // If speed is now below the normal crouch speed, set it to that
    }
    else
    {
        hsp = move * crouchspeed; // Crouch walk in a direction
    }
}
else if (running &amp;&amp; move != 0) // Check if running
{
    sprite_index = spr_player_run; // Set to normal sprite
    if (sign(hsp) != sign(move) &amp;&amp; move != 0 &amp;&amp; hsp != 0) // If changing movement directions, do this
    {
        hsp += move * (movespeed/8); // Start moving in other direction by first cancelling out existing momentum, with slight penalty
    }
    else if (attack_pressed &amp;&amp; attackState==0 &amp;&amp; dashAttackTimer == dashAttackCool){//check if able to dash attack
        instance_create(x+((sprite_width*1.5)*move), y, obj_hb_dash);//create the dash attack hitbox object
        dashAttackTimer = 0;//dash attack cool down reset
        attackState = 1;//is attacking
        dashDir = move;//attack direction
        sprite_index = spr_player_dash;
    }
    else if (abs(hsp) &lt; runspeed &amp;&amp; move != 0) // If under run speed, do this
    {
        hsp += (move * runspeed)*0.1; // Move in direction at run speed
        if (abs(hsp) &gt; runspeed) hsp = move * runspeed;
    }
    else if (abs(hsp) &gt; runspeed &amp;&amp; onground)
    {
        hsp *= 0.96;
    }
}
else
{       //stay in runjump sprite until below running speed or gliding
    if((run_jump &amp;&amp; abs(hsp) &lt; basemovespeed*runmult) ||(run_jump &amp;&amp; gliding)){ 
        sprite_index = spr_player; // Set to normal sprite and stop long jump
        run_jump =false;
    }
    
    if (sign(hsp) != sign(move) &amp;&amp; move != 0 &amp;&amp; hsp != 0) // If changing movement directions, do this
    {
        if (abs(hsp) &lt;= movespeed)
        {
            sprite_index = spr_player;
            hsp += move * (movespeed/2); // Start moving in other direction by first cancelling out existing momentum, with slight penalty
        }
        else if(abs(hsp) &gt; movespeed)
        {
            sprite_index = spr_player_run;
            hsp += move * (movespeed/8); // Start moving in other direction by first cancelling out existing momentum, with slight penalty
        }
    }
    else if (abs(hsp) &lt; movespeed &amp;&amp; move != 0) // If under movement speed, do this
    {
        sprite_index = spr_player;
        hsp = move * movespeed; // Move in direction at move speed
    }
    else if (abs(hsp) &gt; movespeed &amp;&amp; onground)
    {
        hsp *= 0.97; // Exponential speed decay when recovering from running
        //if (abs(hsp) &lt;= movespeed) hsp = move * movespeed; // If below move speed, set to move speed
    }
    else if (move == 0 &amp;&amp; !onground &amp;&amp; !run_jump) // If not pressing movement keys, do this
    {
        hsp *= 0.9; // Exponential speed decay while in the air
        //if (abs(hsp) &lt; movespeed) hsp = 0; // If below base speed, stop
    }
    else if (move == 0 &amp;&amp; onground) // If not pressing movement keys, do this
    {
        sprite_index = spr_player;
        hsp = 0; // Set speed to 0
    }
}

if (vsp &lt; maxfallspeed) vsp += grav; // Increase downward movement speed based on gravity

// Check that player is not trying to drop through a platform, not dashing, and can jump
if (!(place_meeting(x, y+1, obj_platform) &amp;&amp; hsp == 0 &amp;&amp; down_pressed) &amp;&amp; dashAttackTimer == dashAttackCool &amp;&amp; jump_pressed &amp;&amp; canJump)
{
    canJump = false;
    vsp = -jumpspeed;
    if(running){ // check if running when jumping
        sprite_index = spr_player_runjump; //change to runjump sprite
        run_jump = true;
        if (abs(hsp) &lt;= runspeed + runjumpboost)
            hsp += sign(hsp) * runjumpboost;
    }
    //else if(abs(hsp) &lt;= movespeed + jumpboost) 
        //hsp += sign(hsp) * jumpboost;

}

switch(attackState){
    case 1:  //Set hsp to dash attack speed if in attack, but before decceleration
        hsp = dashDir*dashAttackSpeed; //direction and speed
        attackTrigger = true;
        sprite_index = spr_player_dash;
        break;
    case 2:  //stop player if crouch attacking
        hsp =0;
        attackTrigger = true;
        sprite_index = spr_player_crouch_attack;
        break;
}

if(dashAttackTimer &lt; dashAttackCool &amp;&amp; attackState != 1){//Decelerate from attack
    dashAttackTimer++;
    hsp = dashDir*dashAttackSpeed*(dashAttackCool-dashAttackTimer)/dashAttackCool;
    attackTrigger = false;
}else if(attackState == 0){
    attackTrigger = false;
}

hsp_final = hsp + hsp_carry;
hsp_carry = 0;

// Horizonatal collision aka don't go through the walls
if (place_meeting(x+hsp_final, y, obj_wall)) // Check if will hit wall upon moving
{
    //Check if collision still happens with different slopes
    yCheck = 0;//current slope being checked
    yCheckMax = -10;//max slope allowable
    slopeCheck = true;//whether there is still ground in the way
    while(slopeCheck &amp;&amp; yCheck &gt;= yCheckMax){//check through slopes
        yCheck -= 1;
        slopeCheck = place_meeting(x+hsp_final, y+yCheck, obj_wall);
    }
    if(!slopeCheck &amp;&amp; place_meeting(x,y-yCheck, obj_wall)){//if a climable slope, move up to meet the ground
        y += yCheck;
    }else{
        while (!place_meeting(x+sign(hsp_final), y, obj_wall)) // Move 1 in current direction until further movement would collide with the wall
        {
            x += sign(hsp_final);
        }
        hsp = 0; // Prevent further horizontal movement on this step
        hsp_final = 0; // Prevent further horizontal movement on this step
    }
}

// Perform horizontal movement
x += hsp_final;

// Slow vertical movement when jump button is released
if (keyboard_check_released(key_jump) &amp;&amp; !sign(vsp))
{
    vsp /= 2;
}
// If gliding, slow vertical movement by the glide multiplier
if (gliding &amp;&amp; !(vsp &lt;= maxfallspeed * glidemult))
{
    vsp = maxfallspeed * glidemult;
}else{ // If not gliding, and falling, increase gravity
    if (vsp &gt; apexFallTrigger) &amp;&amp; (vsp &lt;= maxfallspeed)
    {
        vsp += grav * 2;
    }
}

/*
if (gliding &amp;&amp; !(vsp &lt;= maxfallspeed * glidemult))
    vsp = maxfallspeed * glidemult;
*/

vsp_final = vsp + vsp_carry;
vsp_carry = 0;

// Vertical collision aka don't go through the floor/ceiling
if (place_meeting(x, y+vsp_final, obj_wall)) // Check if will hit floor/ceiling upon moving
{
    while (!place_meeting(x, y+sign(vsp_final), obj_wall)) // Move 1 in current direction until further movement would collide with the floor/ceiling
    {
        y += sign(vsp_final);
    }
    vsp = 0; // Prevent further vertical movement on this step
    vsp_final = 0; // Prevent further vertical movement on this step
}

y += vsp_final; // Perform vertical movement

// action button event handler, pick up action takes priority over throws
if (action_pressed)
{
    // If pick up conditions are met then pick up object that character is on top of

    // power ups can be picked up even if carrying a throwable
    // for now health is considered to be an automatic pickup
    if (pick_up_ok &amp;&amp; place_meeting(x, y, obj_gloves) &amp;&amp; !has_gloves) 
    {
       
        // get the object ID - rect bounding box
        object_id = collision_rectangle(x-chrW, y-chrH, x+chrW, y+chrH, obj_gloves, false, true);
     
        // stop any movement
        vsp = 0;    
        hsp = 0;        
       
        has_gloves = true; // attacks are now more powerful
        
        // tell object to disappear
        object_id.is_taken = true;
    }
    else if (pick_up_ok &amp;&amp; place_meeting(x, y, obj_shorts) &amp;&amp; !has_shorts) 
    {
    
        // get the object ID - rect bounding box
        object_id = collision_rectangle(x-chrW, y-chrH, x+chrW, y+chrH, obj_shorts, false, true);
    
        // stop any movement
        vsp = 0;    
        hsp = 0;
        
        // present but will have no effect on play
        has_shorts = true; // jumps higher, runs faster
        
        // tell object to disappear
        object_id.is_taken = true;
    }
    
    else if (pick_up_ok &amp;&amp; place_meeting(x, y, obj_boomerang) &amp;&amp; !has_boomerang) 
    {
    
        // get the object ID - rect bounding box
        object_id = collision_rectangle(x-chrW, y-chrH, x+chrW, y+chrH, obj_boomerang, false, true);
        
        // stop any movement
        vsp = 0;    
        hsp = 0;
                
        has_boomerang = true; // throwable object that can be reused if caught        
               
        // tell object to disappear
        object_id.is_taken = true;     
    }
    else if (pick_up_ok &amp;&amp; place_meeting(x, y, obj_pot) &amp;&amp; !has_throwable) 
    {
    
        // get the object ID - rect bounding box
        object_id = collision_rectangle(x-chrW, y-chrH, x+chrW, y+chrH, obj_pot, false, true);
    
        // stop any movement
        vsp = 0;    
        hsp = 0;
       
        has_throwable = true; // throwable item like a pot, can damage enemies

        // get the items id so we can spawn it when throwing it
        throwable_id = object_id.item_id;
        
        // tell object to disappear
        object_id.is_taken = true;      
    }
    else if (pick_up_ok &amp;&amp; place_meeting(x, y, obj_rock) &amp;&amp; !has_throwable) 
    {
    
        // get the object ID - rect bounding box
        object_id = collision_rectangle(x-chrW, y-chrH, x+chrW, y+chrH, obj_rock, false, true);
    
        // stop any movement
        vsp = 0;    
        hsp = 0;
       
        has_throwable = true; 
            
        // get the items id so we can spawn it when throwing it
        throwable_id = object_id.item_id;
        
        // tell object to disappear
        object_id.is_taken = true;      
    }                   
    else if (pick_up_ok &amp;&amp; pWall_pickup_chk &amp;&amp; !has_throwable) 
    {
    
        // get the object ID - rect bounding box
        object_id = collision_rectangle(x-(chrW*1.5), y-(chrH*1.5), x+(chrW*1.5), y+(chrH*1.5), obj_pWall, false, true);
    
        // stop any movement
        vsp = 0;    
        hsp = 0;
       
        has_throwable = true; // throwable item like a pot, can damage enemies

        // get the items id so we can spawn it when throwing it
        throwable_id = object_id.item_id;
        
        // tell object to disappear
        object_id.is_taken = true;      
    }  // end of pick up actions               

    
    // throw action
    else if (throw_ok) {
        
        // pots (wide sine and destroy), rocks (short sine and destroy), and walls (normal sine and plop)
        // create an instance of the object based on id and then tell it to propel across game screen
        if (has_throwable) {
            
            // pot
            if (throwable_id == 1) {
                object_id = instance_create(x, y-(chrH*2), obj_pot);
                object_id.throwDir = facingDir;
                object_id.is_thrown = true;                
            }
            // rock
            else if (throwable_id == 2) {
                object_id = instance_create(x, y-(chrH*2), obj_rock);
                object_id.throwDir = facingDir;
                object_id.is_thrown = true;    
            }
            // wall - they never die and can respawn
            else if (throwable_id == 3) {
                object_id = instance_create(x, y-(chrH*2), obj_pWall);
                object_id.throwDir = facingDir;
                object_id.is_thrown = true;   
            }
            
            // player used throwable remove it from inventory
            throwable_id = 0;
            has_throwable = false;        
        }
        // boomerangs are straight throw and always come back
        else if (has_boomerang) {
            object_id = instance_create(x, y, obj_boomerang);
            object_id.throwDir = facingDir;
            object_id.is_thrown = true;
            has_boomerang = false;
        }    
    }
}


if(inv&lt;1){//this will allow movement through enemies during damage frames
//TODO ADD ENEMIES HERE
/*
if(instance_exists(obj_blep))//make sure the enemy exists
if(place_meeting(x, y, obj_blep))//checks if the enemy meets the player
hp--;//subtracts health away from player and triggers damage handling
/*/
}

/*

End Of Every Step Handlers
• Out Of Bounds Checking
    • Respawning
• Death
    • Reset Variables
• Enemy Damage Handing
    • Assuming the character moves into an enemy, knockback will be applied accordingly
    
*/

//sets the direction facing to the current direction if moving or changing direction
if(move!=0)last_dir=move;

//Check if out of bounds, and cause damage to the player for death
//added some numbers for more leniency with auto killing
//there is no top kill -- gravity is assumed to pull the character back down
if((self.x&lt;-200)||(self.x&gt;room_width+200)||(self.y&gt;room_height+200)){
    //invincibility frame correcting
    last_hp=0;
    hp=0;//auto kills the player
}

//checks for death
if(hp&lt;1){
    hsp=0;vsp=1; //sets speeds back to zero to prevent conflicts with spawn setup
    x=spawn[0];y=spawn[1];//sets the actual position back to start
    inv=inv_frames;//1/3rd of a second at 60fps, of damage invulnerability
    hp=max_hp;//resets health to prevent this death hadnler from running again
    last_hp=hp;//invincibility frame correcting
}

if(hp!=last_hp){//damage frames handler
    if(inv&lt;1){//makes sure the player is not still invincible
    //even if this is called after death reset, it will be equivalent
    inv=inv_frames;
    //reset health for more damage checking
    last_hp=hp;
    }else hp = last_hp;//if invincible, reset health to prior
    /*
    Added/Optional Knockback Handler
        • Reversed Movements attempt to handle situations where the character may become stuck
    */
    //makes sure the recoil is 8, horizontally
    if(hsp==0){
        hsp=-last_dir*8;
    }else{//if this is not 0, then make sure the recoil is = (+8 || -8)
        if((abs(hsp)&lt;8)||(abs(hsp)&gt;8))
        hsp=8*-sign(move);
    }
    
    //OPTIONAL -- Currently on
    //sets the last direction moved the the direction of the damage
    /*this may cause infinte bounce loops, but it preents the player
    from getting bumped all the way to start, assuming tanking though
    a line of enmies*/
    if(hsp!=0)
    last_dir=sign(hsp);//sign is the direction of damage
    
    vsp=-vsp;//-1 = 100% knockback -- -2 = 200% knockback
}

//Setting Damage Sprites, clickering every 6th frame FOR 3 FRAMES
if(inv&gt;0&amp;&amp;inv%6&lt;3){
    if(image_alpha&lt;1)
    image_alpha=1;//100% opaque
    else image_alpha=.2;//20% opaque
    if(inv-1&lt;1)image_alpha=1;//make sure the sprite is not stuck at .3/1 opacity
}
//removes invincibility frames until none exist
if(inv&gt;0)inv--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
