<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Variables

grav = 0.2; // Gravity
hsp = 0; // Horizontal Speed
vsp = 0; // Vertical Speed
jumpspeed = 7; // Jump Speed Constant
movespeed = 4; // Movement Speed Constant
movespeedmax = 12; // Max move speed
movespeedincrement = 0.2; // Move speed increment
crouchspeed = 2; // Movement Speed while crounching
dash_left_timer = 0;
dash_right_timer = 0;
dash_timeout = 10;
dashtrigger = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision

// Get Inputs
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_jump = keyboard_check(vk_space);
key_down = keyboard_check(vk_down);

// Calculate movement
move = -key_left + key_right; // Will be -1 for left and +1 for right

if((key_down &amp;&amp; place_meeting(x, y+1, obj_wall)) || (sprite_index == spr_player_crouching &amp;&amp; place_meeting(x, y-17, obj_wall))) // Slide/crouch if touching ground and holding down or under an object that is short than the player and already crouhing/sliding
{
    sprite_index = spr_player_crouching; // Set to crouching/sliding sprite
    if (abs(hsp) &gt; movespeed) // Slide if moving faster than base movement speed
    {
        hsp *= 0.99 // Exponentially decrease speed
        if (abs(hsp) &lt; crouchspeed) hsp = sign(hsp) * crouchspeed; // If speed is now below the normal crouch speed, set it to that
    }
    else
    {
        hsp = move * crouchspeed; // Crouch walk in a direction
    }
}
else
{
    sprite_index = spr_player; // Set to normal sprite
    if (sign(hsp) != sign(move) &amp;&amp; move != 0 &amp;&amp; hsp != 0) // If changing movement directions, do this
    {
        hsp += move * (movespeed/2); // Start moving in other direction by first cancelling out existing momentum, with slight penalty
    }
    else if (abs(hsp) &lt; movespeed &amp;&amp; move != 0) // If under base movement speed, do this
    {
        hsp = move * movespeed; // Move in direction at base move speed
    }
    else if(abs(hsp) &lt; movespeedmax &amp;&amp; move != 0 &amp;&amp; place_meeting(x, y+1, obj_wall)) // If under max speed but above base and touching the ground, do this
    {
        hsp += move * movespeedincrement; // Add movement speed based on increment.
    }
    else if(move == 0) // If not pressing movement keys, do this
    {
        hsp *= 0.9; // Exponential speed decay
        if (abs(hsp) &lt; movespeed) hsp = 0; // If below base speed, stop
    }
}

if (vsp &lt; 10) vsp += grav; // Increase downward movement speed based on gravity

// Check for dash triggers (double press right or left)
if (keyboard_check_pressed(vk_right))
{
    if(dash_right_timer &gt; 0) 
        dashtrigger = true;
    else
        dash_right_timer = dash_timeout;
    if(dash_left_timer &gt; 0)
        dash_left_timer = 0;
}
else if (keyboard_check_pressed(vk_left))
{
    if(dash_left_timer &gt; 0) 
        dashtrigger = true;
    else
        dash_left_timer = dash_timeout;
    if(dash_right_timer &gt; 0)
        dash_right_timer = 0;
}
if ((keyboard_check_released(vk_left) || keyboard_check_released(vk_right)) &amp;&amp; dashtrigger)
{
    dashtrigger = false;
    dash_left_timer = 0;
    dash_right_timer = 0;
}

if (place_meeting(x, y+1, obj_wall)) // Allow jumping if on floor
{
    vsp = key_jump * -jumpspeed;
}

// Horizonatal collision aka don't go through the walls
if (place_meeting(x+hsp, y, obj_wall)) // Check if will hit wall upon moving
{
    while (!place_meeting(x+sign(hsp), y, obj_wall)) // Move 1 in current direction until further movement would collide with the wall
    {
        x += sign(hsp);
    }
    hsp = 0; // Prevent further horizontal movement on this step
}

// Perform horizontal movement
if(!dashtrigger)
    x += hsp;
else
    x += hsp*2;
if(dash_left_timer &gt; 0) dash_left_timer--;
if(dash_right_timer &gt; 0) dash_right_timer--;

if (keyboard_check_released(vk_space) &amp;&amp; !sign(vsp)) // Slow vertical movement when jump button is released
{
    vsp /= 2;
}

// Vertical collision aka don't go through the floor/ceiling
if (place_meeting(x, y+vsp, obj_wall)) // Check if will hit floor/ceiling upon moving
{
    while (!place_meeting(x, y+sign(vsp), obj_wall)) // Move 1 in current direction until further movement would collide with the floor/ceiling
    {
        y += sign(vsp);
    }
    vsp = 0; // Prevent further vertical movement on this step
}

y += vsp; // Perform vertical movement
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
