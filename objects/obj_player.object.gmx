<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Variables

grav = 0.2; // Gravity
maxfallspeed = 10; // Max speed at which you can fall
hsp = 0; // Horizontal Speed
vsp = 0; // Vertical Speed
jumpspeed = 7; // Jump Speed Constant
basemovespeed = 6; // Movement Speed Constant
crouchmult = 0.5; // Crouch movement multiplier
runmult = 1.5 // Run movement multiplier
movestatusmult = 1; // For buffs/debuffs
glidemult = 0.25; // Glide speed mutlplier
dash_left_timer = 0;
dash_right_timer = 0;
dash_timeout = 15;
dashtrigger = false;
dashAttack = false;
dashAttackSpeed = 12;
dashAttackCool = 20;
dashAttackTimer = dashAttackCool;
down_pressed = 0;
jump_pressed = 0;
fallthrough = false;
attackTrigger = false;


has_gloves = false; // pick up flags - boxing gloves
glovesmult = 1.5; // damage multiplier
has_shorts = false; // boxing shorts
shortsmult = 1; // used for running and jumping
has_boomerang = false; // boomerang
has_throwable = false; // throwable item
throwable_id = 0; // place holder item id for pots/et;al
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls

key_right = vk_right;
key_left = vk_left;
key_jump = ord('Z');
key_attack = ord('X');
key_down = vk_down;
key_run = vk_shift;
taptorun = false;
key_action = ord('C'); // pick_up and throw
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Collision

// Get Inputs
right_pressed = keyboard_check(key_right);
left_pressed = keyboard_check(key_left);
jump_pressed = keyboard_check_pressed(key_jump);
attack_pressed = keyboard_check_pressed(key_attack);
down_pressed = keyboard_check(key_down);
run_pressed = keyboard_check(key_run);
action_pressed = keyboard_check(key_action); // pickup or throw

onground = place_meeting(x, y+1, obj_wall); // True if player is on the ground

// Calculate movement
move = -left_pressed + right_pressed; // Will be -1 for left and +1 for right
crouchspeed = (basemovespeed * crouchmult) * movestatusmult; // Get current crouch speed
runspeed = (basemovespeed * runmult) * movestatusmult; // Get current run speed
movespeed = basemovespeed * movestatusmult; // Get current walk speed

gliding = !onground &amp;&amp; sign(vsp) &amp;&amp; keyboard_check(key_jump); // Check if can glide

if ((keyboard_check_released(key_down) || onground) &amp;&amp; fallthrough) // If in fallthrough and down key has been released or have touched ground, exit fallthrough
    fallthrough = false;

// throw condition - set flag high if conditions are met (idle, moving, running, jumping only)
throw_ok = has_throwable &amp;&amp; (!onground || running || move || move == 0) &amp;&amp; !down_pressed &amp;&amp; !gliding &amp;&amp; !dashtrigger &amp;&amp; !attackTrigger;

// pick up condition - set flag high if conditions met (idle, moving, running only)
pick_up_ok = onground &amp;&amp; (running || move || move == 0) &amp;&amp; !down_pressed &amp;&amp; !gliding &amp;&amp; !dashtrigger &amp;&amp; !attackTrigger;


// Decrement timers
if(dash_left_timer &gt; 0) dash_left_timer--;
if(dash_right_timer &gt; 0) dash_right_timer--;

// Check if dashing has stopped and if so, set dashtrigger to false
if (move == 0 &amp;&amp; dashtrigger)
    dashtrigger = false;

// Check for dash triggers (double press right or left)
if (keyboard_check_pressed(vk_right))
{
    if(dash_right_timer &gt; 0) 
    {
        dashtrigger = true;
        dash_right_timer = 0;
    }
    else
        dash_right_timer = dash_timeout;
    if(dash_left_timer &gt; 0)
        dash_left_timer = 0;
}
else if (keyboard_check_pressed(vk_left))
{
    if(dash_left_timer &gt; 0) 
    {
        dashtrigger = true;
        dash_left_timer = 0;
    }
    else
        dash_left_timer = dash_timeout;
    if(dash_right_timer &gt; 0)
        dash_right_timer = 0;
}

// Set running to false, and only set it to true if dashing has happened with tap-to-run or the run key is held without tap-to-run
running = false;
if (dashtrigger &amp;&amp; taptorun &amp;&amp; onground)
    running = true;
else if (run_pressed &amp;&amp; !taptorun &amp;&amp; onground)
    running = true;

if((down_pressed &amp;&amp; onground &amp;&amp; dashAttackTimer == dashAttackCool) || (sprite_index == spr_player_crouching &amp;&amp; place_meeting(x, y-17, obj_wall))) // Slide/crouch if touching ground and holding down or under an object that is short than the player and already crouhing/sliding
{
    sprite_index = spr_player_crouching; // Set to crouching/sliding sprite
    if (abs(hsp) &gt; movespeed) // Slide if moving faster than base movement speed
    {
        hsp *= 0.99 // Exponentially decrease speed
        if (abs(hsp) &lt; crouchspeed) hsp = sign(hsp) * crouchspeed; // If speed is now below the normal crouch speed, set it to that
    }
    else
    {
        hsp = move * crouchspeed; // Crouch walk in a direction
    }
}
else if (running &amp;&amp; move != 0) // Check if running
{
    sprite_index = spr_player; // Set to normal sprite
    if (sign(hsp) != sign(move) &amp;&amp; move != 0 &amp;&amp; hsp != 0) // If changing movement directions, do this
    {
        hsp += move * (runspeed/2); // Start moving in other direction by first cancelling out existing momentum, with slight penalty
    }else if (attack_pressed &amp;&amp; !dashAttack &amp;&amp; dashAttackTimer == dashAttackCool){//check if able to dash attack
        instance_create(x+ 48*move, y, obj_hb_dash);//create the dash attack hitbox object
        dashAttackTimer = 0;//dash attack cool down reset
        dashAttack = true;//is attacking
        dashDir = move;//attack direction
    }
    else if (abs(hsp) &lt; runspeed &amp;&amp; move != 0) // If under base movement speed, do this
    {
        hsp = move * runspeed; // Move in direction at run speed
    }
}
else
{
    sprite_index = spr_player; // Set to normal sprite
    if (sign(hsp) != sign(move) &amp;&amp; move != 0 &amp;&amp; hsp != 0) // If changing movement directions, do this
    {
        hsp += move * (movespeed/2); // Start moving in other direction by first cancelling out existing momentum, with slight penalty
    }
    else if (abs(hsp) &lt; movespeed &amp;&amp; move != 0) // If under movement speed, do this
    {
        hsp = move * movespeed; // Move in direction at move speed
    }
    else if (!run_pressed &amp;&amp; abs(hsp) &gt; movespeed &amp;&amp; onground)
    {
        hsp *= 0.8; // Exponential speed decay
        if (abs(hsp) &lt;= movespeed) hsp = move * movespeed; // If below base speed, stop
    }
    else if (move == 0 &amp;&amp; onground) // If not pressing movement keys, do this
    {
        hsp *= 0.9; // Exponential speed decay
        if (abs(hsp) &lt; movespeed) hsp = 0; // If below base speed, stop
    }
}

if (vsp &lt; maxfallspeed) vsp += grav; // Increase downward movement speed based on gravity

// Allow jumping if on floor, but don't allow it if on a platform, crouching, and not moving or while dash attacking
if (onground &amp;&amp; !(place_meeting(x, y+1, obj_platform) &amp;&amp; hsp == 0 &amp;&amp; down_pressed) &amp;&amp; dashAttackTimer == dashAttackCool)
{
    vsp = jump_pressed * -jumpspeed;
}

if(dashAttack){//Set hsp to dash attack speed if in attack, but before decceleration
    hsp = dashDir*dashAttackSpeed;
    attackTrigger = true;
}

if(dashAttackTimer &lt; dashAttackCool &amp;&amp; !dashAttack){//Decelerate from attack
    dashAttackTimer++;
    hsp = dashDir*dashAttackSpeed*(dashAttackCool-dashAttackTimer)/dashAttackCool;
    attackTrigger = false;
}

// Horizonatal collision aka don't go through the walls
if (place_meeting(x+hsp, y, obj_wall)) // Check if will hit wall upon moving
{
    //Check if collision still happens with different slopes
    yCheck = 0;//current slope being checked
    yCheckMax = -10;//max slope allowable
    slopeCheck = true;//whether there is still ground in the way
    while(slopeCheck &amp;&amp; yCheck &gt;= yCheckMax){//check through slopes
        yCheck -= 1;
        slopeCheck = place_meeting(x+hsp, y+yCheck, obj_wall);
    }
    if(!slopeCheck){//if a climable slope, move up to meet the ground
        y += yCheck;
    }else{
        while (!place_meeting(x+sign(hsp), y, obj_wall)) // Move 1 in current direction until further movement would collide with the wall
        {
            x += sign(hsp);
        }
        hsp = 0; // Prevent further horizontal movement on this step
    }
}

// Perform horizontal movement
x += hsp;

// Slow vertical movement when jump button is released
if (keyboard_check_released(key_jump) &amp;&amp; !sign(vsp))
{
    vsp /= 2;
}

// If gliding, slow vertical movement by the glide multiplier
if (gliding &amp;&amp; !(vsp &lt;= maxfallspeed * glidemult))
    vsp = maxfallspeed * glidemult;

// Vertical collision aka don't go through the floor/ceiling
if (place_meeting(x, y+vsp, obj_wall)) // Check if will hit floor/ceiling upon moving
{
    while (!place_meeting(x, y+sign(vsp), obj_wall)) // Move 1 in current direction until further movement would collide with the floor/ceiling
    {
        y += sign(vsp);
    }
    vsp = 0; // Prevent further vertical movement on this step
}

y += vsp; // Perform vertical movement


// If pick up conditions are met then pick up object that character is on top of
if (pick_up_ok &amp;&amp; action_pressed)
{

    // power ups can be picked up even if carrying a throwable
    // for now health is considered to be an automatic pickup
    if (place_meeting(x, y, obj_gloves) &amp;&amp; !has_gloves) 
    {
        
        // stop any movement
        vsp = 0;    
        hsp = 0;        
       
        has_gloves = true; // attacks are now more powerful
        
        // tell object to disappear
        obj_gloves.is_taken = true;
    }
    else if (place_meeting(x, y, obj_shorts) &amp;&amp; !has_shorts) 
    {
    
        // stop any movement
        vsp = 0;    
        hsp = 0;
        
        // present but will have no effect on play
        has_shorts = true; // jumps higher, runs faster
        
        // tell object to disappear
        obj_shorts.is_taken = true; 
    }
    
    else if (place_meeting(x, y, obj_boomerang) &amp;&amp; !has_boomerang) 
    {
        // stop any movement
        vsp = 0;    
        hsp = 0;
                
        has_boomerang = true; // throwable object that can be reused if caught        
               
        // tell object to disappear
        obj_boomerang.is_taken = true;        
    }
    else if (place_meeting(x, y, obj_throwable) &amp;&amp; !has_throwable) 
    {
    
        // stop any movement
        vsp = 0;    
        hsp = 0;
       
        has_throwable = true; // throwable item like a pot, can damage enemies

        // get the items id so we can spawn it when throwing it
        throwable_id = obj_throwable.item_id;
        
        // tell object to disappear
        obj_throwable.is_taken = true;          
    }    
}


// If throwable conditions are met then throw the object
if (throw_ok &amp;&amp; action_pressed) 
{
    // TODO: throw the object 
    has_item = false;    
    item_id = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
