<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_croc_harm</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Needed variables to determine intervals

event_inherited();

max_speed = 0;
max_interval = 60*3;//intervals of 3 seconds each from safe-unsafe
interval = 0;//counter
damage = true;
oncroc = false;

inv=true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Caclulate intervals of damage and platform here

oncroc=false;//reset jump ability to prevent getting stuck
interval++;
hsp=0;//no moving check

if(interval&gt;=max_interval){
damage = !damage;
interval=0;//reset counter
if(damage)//set sprite as neccessary -- visual aid
sprite_index = spr_croc_harm;
else
sprite_index = spr_croc_safe;
}

//do the thing
event_inherited();

if(damage){
//damage handling
if(place_meeting(x,y,obj_player)){
if(obj_player.inv&lt;1)//allow player to walk through
obj_player.hp--;
}
}else{
//this needs to be treated as a platform
//set the onground varable and vsp and player x to permit normal action
if(obj_player.y&lt;=self.bbox_top)//makes sure the player is above the croc
if(obj_player.y+obj_player.vsp&gt;=y)//make sure the player will collide
if(obj_player.x&gt;=self.x){//if this is in the right barrier
if(obj_player.x&lt;=self.x+abs(bbox_left-bbox_right)){//if this is in the left barrier
obj_player.vsp=0;
obj_player.hsp=0;
obj_player.y=y;
oncroc = true;
}
}

}

//does not allow dash jumping though
//could be added in with a shift press handler
if(oncroc&amp;&amp;obj_player.jump_pressed){//allow jumping while on the croc
//normal jump speed handler
obj_player.vsp=obj_player.jump_pressed * -obj_player.jumpspeed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
