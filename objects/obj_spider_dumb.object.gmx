<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spider</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Enemy Variables
//call the parent creation code and other single instance code
event_inherited();
max_speed=0;//customised default variable
hsp=0;//customized default variable
maxfallspeed=0;

spawn[0] = x;
spawn[1] = y;

dir=0;//direction this is facing

view_width=40;
maxfalldistance = 72; // 3 tiles or so
canfall = abs(obj_player.x-x)&lt;view_width;//determines if it should go down or not on spawn
climbing = false;//able to move back up or not

max_wait=38;//max waiting frames after action
wait=max_wait;//ca move upon spawning

draw_enable_drawevent(true);//allow anything to be drawn

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use event_inherited for collision detection

/*

Do note that alot of this code is variable handling, since
We have to make sure the spider moves approrately while
Using the parent object's (obj_enemy) collsion detection

*/

//timing counter
if(!canfall&amp;&amp;!climbing)
wait++;

//determines if this should move
if((wait&gt;=max_wait)&amp;&amp;abs(obj_player.x-x)&lt;40&amp;&amp;!canfall&amp;&amp;!climbing){
canfall=true;
maxfallspeed=.3;
wait=0;//resets counter to create wait times as predetermined
}

//check if this will go back up
//go back up if limit has been reached or is hitting a wall (alt wall check needed)
if(canfall&amp;&amp;(abs(spawn[1]-y)&gt;=maxfalldistance)){
climbing = true;
canfall=false;
maxfallspeed=0;
vsp=0;
}

if(climbing){
vsp=-1;
    //break out of this check if the distance is close enough to start position
    if(abs(y-spawn[1])&lt;2){
    y=spawn[1];
    maxfallspeed=0;
    vsp=0;
    climbing = false;
    }
}

if(!canfall&amp;&amp;!climbing){
vsp=0;
maxfallspeed=0;
}


//damage handling
if(place_meeting(x,y,obj_player)){
if(obj_player.inv&lt;1)//allow player to walk through
obj_player.hp--;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Extra Graphics -- spider line/webbing
draw_set_colour(c_white);//set the drawing color to white
//graw the actual line
draw_line(spawn[0],spawn[1]-abs(bbox_top-bbox_bottom),x,y-abs(bbox_top-bbox_bottom));

//make sure to actually draw the sprite :'V
draw_self();

if(global.debug_graphics){

draw_set_color(c_red);

draw_rectangle(spawn[0]-abs(bbox_left-bbox_right)*2,spawn[1],spawn[0]+view_width,
spawn[1]+maxfalldistance,1);


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
