<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create needed variables

/*

NOTE: THE ONL UNIVERSAL VARIABLES YOU SHOULD EDIT IN CREATION CODE ARE LISTED AS FOLLOWS
    • dir // this should be -1,0,1 as it allows movement in that direction
    • max_speed // this should always be positive and less than or equal to 1 (because enemies have many more frames than the player object)
    
    • OTHER VARIABLES ARE AT YOUR OWN RISK
      - However, presetting hsp can create a 'cannon' effect if it were used in a cutscene
      - so not everything is bad necessarily, but it may create uninteded consequences

*/

hsp=0;//horizontal move speed
vsp=0;//vertical move speed

max_speed = 1;//maximum horizontal speed
max_jump = 4;//maximum jump height
maxfallspeed = 8; // Max speed at which this can fall
dir = -1;//left facing for default
grav = 0.002;//gravity -- divided by 1000 the normal player amount for the number of frames per second for less than instant falling

//more variables for one time only creation code
onground = place_meeting(x, y+1, obj_wall);

hp = 2; //2 hits per enemy to kill -- can be changed per enemy basis
inv = false;//sets the enemey to be invincible or not -- changed per enemy basis
inv_frame = 0;
max_inv = 30;//only half a second of invincibility for enemies

/*
is_solid = false;//false allows the player to walk through
damage = 1;//the amount of damage to cause to the player
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_enemy</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Collsision here as a base

if (vsp &lt; maxfallspeed) vsp += grav;

// Horizonatal collision aka don't go through the walls
if (place_meeting(x+hsp, y, obj_wall)) // Check if will hit wall upon moving
{
    //Check if collision still happens with different slopes
    yCheck = 0;//current slope being checked
    yCheckMax = -10;//max slope allowable
    slopeCheck = true;//whether there is still ground in the way
    while(slopeCheck &amp;&amp; yCheck &gt;= yCheckMax){//check through slopes
        yCheck -= 1;
        slopeCheck = place_meeting(x+hsp, y+yCheck, obj_wall);
    }
    if(!slopeCheck &amp;&amp; place_meeting(x,y-yCheck, obj_wall)){//if a climable slope, move up to meet the ground
        y += yCheck;
    }else{
        while (!place_meeting(x+sign(hsp), y, obj_wall)) // Move 1 in current direction until further movement would collide with the wall
        {
            x += sign(hsp);
        }
        hsp = 0; // Prevent further horizontal movement on this step
    }
}

// Perform horizontal movement
x += hsp;

if (place_meeting(x, y+vsp, obj_wall)) // Check if will hit floor/ceiling upon moving
{
    while (!place_meeting(x, y+sign(vsp), obj_wall)) // Move 1 in current direction until further movement would collide with the floor/ceiling
    {
        y += sign(vsp);
    }
    vsp = 0; // Prevent further vertical movement on this step
}

y += vsp; // Perform vertical movement


//destroy this if it flies outside the room -- save CPU
if((self.x&lt;-200)||(self.x&gt;room_width+200)||(self.y&gt;room_height+200||self.y&lt;-200)){
    instance_destroy();
    if(debug_console)
    show_debug_message("REMOVED ENEMY FROM ROOM");
}

//if(inv)return 0;


if(inv_frame&gt;0&amp;&amp;inv_frame%6&lt;3){//flickering effect
    if(image_alpha&lt;1)
    image_alpha=1;//100% opaque
    else image_alpha=.2;//20% opaque
    if(inv_frame-1&lt;1)image_alpha=1;//make sure the sprite is not stuck at .3/1 opacity
}
if(inv_frame&gt;0)inv--;
/* DAMAGE TO THE ENEMY UNIMPLEMENTED
if(inv_frame&lt;1)
if(place_meeting(x+hsp, y, null)){
hp--;
inv_frame=max_inv;
}
*/

if(!inv){//damage and kill enemy
if(hp&lt;1)instance_destroy();//remove/kill the enmy when it's helth drops to zero or below
}
/*
if(place_meeting(x,y,obj_player)){
if(!is_solid)
if(obj_player.inv&lt;1)//allow player to walk through
obj_player.hp-=damage;
else obj_player.hp-=damage;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
